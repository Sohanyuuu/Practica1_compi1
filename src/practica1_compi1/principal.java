/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica1_compi1;

import com.sun.xml.internal.ws.commons.xmlutil.Converter;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import static java.util.Collections.list;
import java.util.Scanner;
import java.util.TimerTask;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import static practica1_compi1.Practica1_compi1.texto;
import static practica1_compi1.Practica1_compi1.texto2;

/**
 *
 * @author sohal
 */
public class principal extends javax.swing.JFrame {

    /**
     * Creates new form principal
     */
    String nc = "";
    int contadorpieza = 0;
    String[] piezas = new String[3];
    JButton[][] b;
    char[][] np;
    int filas;
    int columnas;
    int posicion = 0;
    int fin = 3;
    String pi = "";
    int puntos = 0;
    ArrayList<Figura> fig = new ArrayList<Figura>();
    ArrayList<Nivel> niveles = new ArrayList<Nivel>();
    ArrayList<Token> nt = new ArrayList<Token>();
    ArrayList<Token> nt2 = new ArrayList<Token>();
    ArrayList<Error> errores = new ArrayList<Error>();
    ArrayList<Error> errores2 = new ArrayList<Error>();
    int con = 0;
    int conrotaci√≥n = 0;
    int contadorbajada = 0;
    int puntosnivel = 0;
    int velocidad = 1000;

    public principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 204, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 36, 510, 500));

        jButton1.setText("Bajar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 60, -1, -1));

        jButton2.setText("Atras");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 110, -1, -1));

        jButton3.setText("Adelante");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 110, -1, -1));

        jButton4.setText("Rotar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 150, -1, -1));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel1.setToolTipText("");
        jLabel1.setAutoscrolls(true);
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 190, 380, 110));

        jTextPane1.setEditable(false);
        jScrollPane1.setViewportView(jTextPane1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 340, 160, 250));

        jScrollPane2.setViewportView(jTextPane2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 340, 160, 250));

        jLabel2.setText("Archivo 1");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 320, -1, -1));

        jLabel3.setText("Archivo 2");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 320, -1, -1));

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Abrir archivo 1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Abrir archivo 2");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Salir");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Juego");

        jMenuItem4.setText("Analizar archivo 1");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Analizar archivo 2");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Iniciar juego");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ayuda");

        jMenuItem7.setText("Manual de usuario");
        jMenu3.add(jMenuItem7);

        jMenuItem8.setText("Acerca de...");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem9.setText("Reporte de tokens");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser jfc = new JFileChooser("../Documents/");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filtro = new FileNameExtensionFilter("Archivos TRS (*.trs)", "trs");
        jfc.setFileFilter(filtro);
        if (jfc.showDialog(principal.this, "Abrir archivo") == JFileChooser.APPROVE_OPTION) {
            String t = "";
            try {
                String nombre = jfc.getSelectedFile().getPath();
                File archivo = new File(nombre);
                FileReader sc = new FileReader(archivo);
                BufferedReader br = new BufferedReader(sc);

                while ((texto = br.readLine()) != null) {
                    System.out.println(texto);
                    nc += texto + "\n";
                }

                
            } catch (IOException e) {

                System.out.println("No se ha encontrado el archivo");
            }

        }
        
        jTextPane1.setText(nc);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    public void pintar(String letra, int rot, int fin, int col) {
        switch (letra) {
            case "T":
                try {
                    if (rot == 1) {
                        np[fin - 1][col - 1] = 42;
                        np[fin][col] = 42;
                        np[fin - 1][col + 1] = 42;
                        np[fin - 1][col] = 42;
                        /*b[fin - 1][col - 1].setBackground(Color.green);
                        b[fin - 1][col - 1].setBackground(Color.green);
                        b[fin][col].setBackground(Color.green);
                        b[fin - 1][col + 1].setBackground(Color.green);
                        b[fin - 1][col].setBackground(Color.green);
                         */
                    } else if (rot == 2) {
                        np[fin][col - 1] = 42;
                        np[fin - 1][col] = 42;
                        np[fin][col + 1] = 42;
                        np[fin][col] = 42;
                        /* b[fin][col - 1].setBackground(Color.green);
                        b[fin - 1][col].setBackground(Color.green);
                        b[fin][col + 1].setBackground(Color.green);
                        b[fin][col].setBackground(Color.green);*/
                    } else if (rot == 3) {
                        np[fin - 2][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin - 1][col + 1] = 42;
                        np[fin][col] = 42;
                        /* b[fin - 2][col].setBackground(Color.green);
                        b[fin - 1][col].setBackground(Color.green);
                        b[fin - 1][col + 1].setBackground(Color.green);
                        b[fin][col].setBackground(Color.green);*/
                    } else if (rot == 4) {
                        np[fin - 2][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin - 1][col - 1] = 42;
                        np[fin][col] = 42;
                        /*b[fin - 2][col].setBackground(Color.green);
                        b[fin - 1][col].setBackground(Color.green);
                        b[fin - 1][col - 1].setBackground(Color.green);
                        b[fin][col].setBackground(Color.green);*/
                    }
                } catch (Exception e) {

                }
                break;
            case "L":
                try {
                    if (rot == 1) {
                        np[fin - 2][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin][col] = 42;
                        np[fin][col + 1] = 42;
                        /*b[fin - 2][col].setBackground(Color.blue);
                        b[fin - 1][col].setBackground(Color.blue);
                        b[fin][col].setBackground(Color.blue);
                        b[fin][col + 1].setBackground(Color.blue);*/
                    } else if (rot == 2) {
                        np[fin - 2][col] = 42;
                        np[fin - 2][col + 1] = 42;
                        np[fin - 1][col + 1] = 42;
                        np[fin][col + 1] = 42;
                        /*b[fin - 2][col].setBackground(Color.blue);
                        b[fin - 2][col + 1].setBackground(Color.blue);
                        b[fin - 1][col + 1].setBackground(Color.blue);
                        b[fin][col + 1].setBackground(Color.blue);*/
                    } else if (rot == 3) {
                        np[fin][col] = 42;
                        np[fin][col + 1] = 42;
                        np[fin][col + 2] = 42;
                        np[fin - 1][col + 2] = 42;
                        /*b[fin][col].setBackground(Color.blue);
                        b[fin][col + 1].setBackground(Color.blue);
                        b[fin][col + 2].setBackground(Color.blue);
                        b[fin - 1][col + 2].setBackground(Color.blue);*/
                    } else if (rot == 4) {
                        np[fin][col - 2] = 42;
                        np[fin - 1][col - 2] = 42;
                        np[fin - 1][col - 1] = 42;
                        np[fin - 1][col] = 42;
                        /*b[fin][col - 2].setBackground(Color.blue);
                        b[fin - 1][col - 2].setBackground(Color.blue);
                        b[fin - 1][col - 1].setBackground(Color.blue);
                        b[fin - 1][col].setBackground(Color.blue);*/
                    }
                } catch (Exception e) {

                }
                break;
            case "I":
                try {
                    if (rot == 1) {
                        np[fin - 3][col] = 42;
                        np[fin - 2][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin][col] = 42;
                        /*b[fin - 3][col].setBackground(Color.red);
                        b[fin - 2][col].setBackground(Color.red);
                        b[fin - 1][col].setBackground(Color.red);
                        b[fin][col].setBackground(Color.red);*/
                    } else if (rot == 3) {
                        np[fin][col - 3] = 42;
                        np[fin][col - 2] = 42;
                        np[fin][col - 1] = 42;
                        np[fin][col] = 42;
                        /*b[fin][col - 3].setBackground(Color.red);
                        b[fin][col - 2].setBackground(Color.red);
                        b[fin][col - 1].setBackground(Color.red);
                        b[fin][col].setBackground(Color.red);*/
                    } else if (rot == 2) {
                        np[fin - 3][col] = 42;
                        np[fin - 2][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin][col] = 42;
                        /*b[fin - 3][col].setBackground(Color.red);
                        b[fin - 2][col].setBackground(Color.red);
                        b[fin - 1][col].setBackground(Color.red);
                        b[fin][col].setBackground(Color.red);*/
                    } else if (rot == 4) {
                        np[fin][col - 3] = 42;
                        np[fin][col - 2] = 42;
                        np[fin][col - 1] = 42;
                        np[fin][col] = 42;
                        /*b[fin][col - 3].setBackground(Color.red);
                        b[fin][col - 2].setBackground(Color.red);
                        b[fin][col - 1].setBackground(Color.red);
                        b[fin][col].setBackground(Color.red);*/
                    }
                } catch (Exception e) {

                }
                break;
            case "Z":
                try {
                    if (rot == 1) {
                        np[fin][col + 2] = 42;
                        np[fin][col + 1] = 42;
                        np[fin - 1][col + 1] = 42;
                        np[fin - 1][col] = 42;
                        /*b[fin + 3][col].setBackground(Color.orange);
                        b[fin + 3][col + 1].setBackground(Color.orange);
                        b[fin + 2][col + 1].setBackground(Color.orange);
                        b[fin + 2][col + 2].setBackground(Color.orange);*/
                    } else if (rot == 3) {
                        np[fin - 0][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin - 1][col + 1] = 42;
                        np[fin - 2][col + 1] = 42;
                        /*b[fin - 2][col].setBackground(Color.orange);
                        b[fin - 1][col].setBackground(Color.orange);
                        b[fin - 1][col + 1].setBackground(Color.orange);
                        b[fin - 0][col + 1].setBackground(Color.orange);*/
                    } else if (rot == 2) {
                        np[fin][col + 2] = 42;
                        np[fin][col + 1] = 42;
                        np[fin - 1][col + 1] = 42;
                        np[fin - 1][col] = 42;
                        /*b[fin + 3][col].setBackground(Color.orange);
                        b[fin + 3][col + 1].setBackground(Color.orange);
                        b[fin + 2][col + 1].setBackground(Color.orange);
                        b[fin + 2][col + 2].setBackground(Color.orange);*/
                    } else if (rot == 4) {
                        np[fin - 0][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin - 1][col + 1] = 42;
                        np[fin - 2][col + 1] = 42;
                        /* b[fin - 2][col].setBackground(Color.orange);
                        b[fin - 1][col].setBackground(Color.orange);
                        b[fin - 1][col + 1].setBackground(Color.orange);
                        b[fin - 0][col + 1].setBackground(Color.orange);*/
                    }
                } catch (Exception e) {

                }
                break;
            case "O":
                try {
                    np[fin - 1][col] = 42;
                    np[fin - 1][col + 1] = 42;
                    np[fin][col + 1] = 42;
                    np[fin][col] = 42;
                    /* b[fin - 1][col].setBackground(Color.yellow);
                    b[fin - 1][col + 1].setBackground(Color.yellow);
                    b[fin][col + 1].setBackground(Color.yellow);
                    b[fin][col].setBackground(Color.yellow);*/
                } catch (Exception e) {

                }
                break;
            case "S":
                try {
                    if (rot == 1) {
                        np[fin + 3][col] = 42;
                        np[fin + 3][col + 1] = 42;
                        np[fin + 2][col + 1] = 42;
                        np[fin + 2][col + 2] = 42;
                        /*b[fin + 3][col].setBackground(Color.orange);
                        b[fin + 3][col + 1].setBackground(Color.orange);
                        b[fin + 2][col + 1].setBackground(Color.orange);
                        b[fin + 2][col + 2].setBackground(Color.orange);*/
                    } else if (rot == 2) {
                        np[fin - 2][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin - 1][col + 1] = 42;
                        np[fin - 0][col + 1] = 42;
                        /*b[fin - 2][col].setBackground(Color.orange);
                        b[fin - 1][col].setBackground(Color.orange);
                        b[fin - 1][col + 1].setBackground(Color.orange);
                        b[fin - 0][col + 1].setBackground(Color.orange);*/
                    } else if (rot == 3) {
                        np[fin + 3][col] = 42;
                        np[fin + 3][col + 1] = 42;
                        np[fin + 2][col + 1] = 42;
                        np[fin + 2][col + 2] = 42;
                        /* b[fin + 3][col].setBackground(Color.orange);
                        b[fin + 3][col + 1].setBackground(Color.orange);
                        b[fin + 2][col + 1].setBackground(Color.orange);
                        b[fin + 2][col + 2].setBackground(Color.orange);*/
                    } else if (rot == 4) {
                        np[fin - 2][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin - 1][col + 1] = 42;
                        np[fin - 0][col + 1] = 42;
                        /*b[fin - 2][col].setBackground(Color.orange);
                        b[fin - 1][col].setBackground(Color.orange);
                        b[fin - 1][col + 1].setBackground(Color.orange);
                        b[fin - 0][col + 1].setBackground(Color.orange);*/
                    }
                } catch (Exception e) {

                }
                break;
            case "J":
                try {
                    if (rot == 1) {
                        np[fin - 2][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin][col] = 42;
                        np[fin][col - 1] = 42;
                        /*b[fin - 2][col].setBackground(Color.MAGENTA);
                        b[fin - 1][col].setBackground(Color.MAGENTA);
                        b[fin][col].setBackground(Color.MAGENTA);
                        b[fin][col - 1].setBackground(Color.MAGENTA);*/
                    } else if (rot == 2) {
                        np[fin][col] = 42;
                        np[fin - 1][col] = 42;
                        np[fin - 2][col] = 42;
                        np[fin - 2][col + 1] = 42;
                        /* b[fin][col].setBackground(Color.MAGENTA);
                        b[fin - 1][col].setBackground(Color.MAGENTA);
                        b[fin - 2][col].setBackground(Color.MAGENTA);
                        b[fin - 2][col + 1].setBackground(Color.MAGENTA);*/
                    } else if (rot == 3) {
                        np[fin - 2][col] = 42;
                        np[fin - 2][col + 1] = 42;
                        np[fin - 2][col + 2] = 42;
                        np[fin - 1][col + 2] = 42;
                        /* b[fin - 2][col].setBackground(Color.MAGENTA);
                        b[fin - 2][col + 1].setBackground(Color.MAGENTA);
                        b[fin - 2][col + 2].setBackground(Color.MAGENTA);
                        b[fin - 1][col + 2].setBackground(Color.MAGENTA);*/
                    } else if (rot == 4) {
                        np[fin - 2][col - 2] = 42;
                        np[fin - 1][col - 2] = 42;
                        np[fin - 1][col - 1] = 42;
                        np[fin - 1][col] = 42;
                        /* b[fin - 2][col].setBackground(Color.MAGENTA);
                        b[fin - 2][col - 1].setBackground(Color.MAGENTA);
                        b[fin - 2][col - 2].setBackground(Color.MAGENTA);
                        b[fin - 1][col - 2].setBackground(Color.MAGENTA);*/
                    }
                } catch (Exception e) {

                }
                break;

        }
    }

    public void despintar(String letra, int rot, int fin, int col) {
        switch (letra) {
            case "T":
                try {
                    if (rot == 1) {
                        np[fin - 1][col - 1] = 35;
                        np[fin][col] = 35;
                        np[fin - 1][col + 1] = 35;
                        np[fin - 1][col] = 35;
                    } else if (rot == 2) {
                        np[fin][col - 1] = 35;
                        np[fin - 1][col] = 35;
                        np[fin][col + 1] = 35;
                        np[fin][col] = 35;
                    } else if (rot == 3) {
                        np[fin - 2][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin - 1][col + 1] = 35;
                        np[fin][col] = 35;
                    } else if (rot == 4) {
                        np[fin - 2][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin - 1][col - 1] = 35;
                        np[fin][col] = 35;
                    }
                } catch (Exception e) {

                }
                break;
            case "L":
                try {
                    if (rot == 1) {
                        np[fin - 2][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin][col] = 35;
                        np[fin][col + 1] = 35;
                    } else if (rot == 2) {
                        np[fin - 2][col] = 35;
                        np[fin - 2][col + 1] = 35;
                        np[fin - 1][col + 1] = 35;
                        np[fin][col + 1] = 35;
                    } else if (rot == 3) {
                        np[fin][col] = 35;
                        np[fin][col + 1] = 35;
                        np[fin][col + 2] = 35;
                        np[fin - 1][col + 2] = 35;
                    } else if (rot == 4) {
                        np[fin][col - 2] = 35;
                        np[fin - 1][col - 2] = 35;
                        np[fin - 1][col - 1] = 35;
                        np[fin - 1][col] = 35;
                    }
                } catch (Exception e) {

                }
                break;
            case "I":
                try {
                    if (rot == 1) {
                        np[fin - 3][col] = 35;
                        np[fin - 2][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin][col] = 35;
                    } else if (rot == 3) {
                        np[fin][col - 3] = 35;
                        np[fin][col - 2] = 35;
                        np[fin][col - 1] = 35;
                        np[fin][col] = 35;
                    } else if (rot == 2) {
                        np[fin - 3][col] = 35;
                        np[fin - 2][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin][col] = 35;
                    } else if (rot == 4) {
                        np[fin][col - 3] = 35;
                        np[fin][col - 2] = 35;
                        np[fin][col - 1] = 35;
                        np[fin][col] = 35;
                    }
                } catch (Exception e) {

                }
                break;
            case "Z":
                try {
                    if (rot == 1) {
                        np[fin][col + 2] = 35;
                        np[fin][col + 1] = 35;
                        np[fin - 1][col + 1] = 35;
                        np[fin - 1][col] = 35;
                    } else if (rot == 3) {
                        np[fin - 0][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin - 1][col + 1] = 35;
                        np[fin - 2][col + 1] = 35;
                    } else if (rot == 2) {
                        np[fin][col + 2] = 35;
                        np[fin][col + 1] = 35;
                        np[fin - 1][col + 1] = 35;
                        np[fin - 1][col] = 35;
                    } else if (rot == 4) {
                        np[fin - 0][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin - 1][col + 1] = 35;
                        np[fin - 2][col + 1] = 35;
                    }
                } catch (Exception e) {

                }
                break;
            case "O":
                try {
                    np[fin - 1][col] = 35;
                    np[fin - 1][col + 1] = 35;
                    np[fin][col + 1] = 35;
                    np[fin][col] = 35;
                } catch (Exception e) {

                }
                break;
            case "S":
                try {
                    if (rot == 1) {
                        np[fin + 3][col] = 35;
                        np[fin + 3][col + 1] = 35;
                        np[fin + 2][col + 1] = 35;
                        np[fin + 2][col + 2] = 35;
                    } else if (rot == 2) {
                        np[fin - 2][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin - 1][col + 1] = 35;
                        np[fin - 0][col + 1] = 35;
                    } else if (rot == 3) {
                        np[fin + 3][col] = 35;
                        np[fin + 3][col + 1] = 35;
                        np[fin + 2][col + 1] = 35;
                        np[fin + 2][col + 2] = 35;
                    } else if (rot == 4) {
                        np[fin - 2][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin - 1][col + 1] = 35;
                        np[fin - 0][col + 1] = 35;
                    }
                } catch (Exception e) {

                }
                break;
            case "J":
                try {
                    if (rot == 1) {
                        np[fin - 2][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin][col] = 35;
                        np[fin][col - 1] = 35;
                    } else if (rot == 2) {
                        np[fin][col] = 35;
                        np[fin - 1][col] = 35;
                        np[fin - 2][col] = 35;
                        np[fin - 2][col + 1] = 35;
                    } else if (rot == 3) {
                        np[fin - 2][col] = 35;
                        np[fin - 2][col + 1] = 35;
                        np[fin - 2][col + 2] = 35;
                        np[fin - 1][col + 2] = 35;
                    } else if (rot == 4) {
                        np[fin - 2][col - 2] = 35;
                        np[fin - 1][col - 2] = 35;
                        np[fin - 1][col - 1] = 35;
                        np[fin - 1][col - 0] = 35;
                    }
                } catch (Exception e) {

                }
                break;
        }
    }

    public void obtenerfin(String nombre, int rot, int f, int p) {
        switch (fig.get(contadorpieza).getnombre()) {
            case "T":
                try {
                    if (rot == 1) {
                        fin = 1;
                    } else if (rot == 2) {
                        fin = 1;
                    } else if (rot == 3) {
                        fin = 2;
                    } else if (rot == 4) {
                        fin = 2;
                    }
                } catch (Exception e) {

                }
                break;
            case "L":
                try {
                    if (rot == 1) {
                        fin = 2;
                    } else if (rot == 2) {
                        fin = 2;
                    } else if (rot == 3) {
                        fin = 1;
                    } else if (rot == 4) {
                        fin = 1;
                    }
                } catch (Exception e) {

                }
                break;
            case "I":
                try {
                    if (rot == 1) {
                        fin = 3;
                    } else if (rot == 3) {
                        fin = 1;
                    } else if (rot == 2) {
                        fin = 3;
                    } else if (rot == 4) {
                        fin = 1;
                    }
                } catch (Exception e) {

                }
                break;
            case "Z":
                try {
                    if (rot == 1) {
                        fin = 2;
                    } else if (rot == 3) {
                        fin = 2;
                    } else if (rot == 2) {
                        fin = 2;
                    } else if (rot == 4) {
                        fin = 2;
                    }
                } catch (Exception e) {

                }
                break;
            case "O":
                try {
                    fin = 1;
                } catch (Exception e) {

                }
                break;
            case "S":
                try {
                    if (rot == 1) {
                        fin = 0;
                    } else if (rot == 2) {
                        fin = 0;
                    } else if (rot == 3) {
                        fin = 2;
                    } else if (rot == 4) {
                        fin = 2;
                    }
                } catch (Exception e) {

                }
                break;
            case "J":
                try {
                    if (rot == 1) {
                        fin = 2;
                    } else if (rot == 2) {
                        fin = 2;
                    } else if (rot == 3) {
                        fin = 2;
                    } else if (rot == 4) {
                        fin = 2;
                    }
                } catch (Exception e) {

                }
                break;
        }
    }
    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser jfc = new JFileChooser("../Documents/");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter filtro = new FileNameExtensionFilter("Archivos PZS (*.pzs)", "pzs");
        jfc.setFileFilter(filtro);
        if (jfc.showDialog(principal.this, "Abrir archivo") == JFileChooser.APPROVE_OPTION) {

            try {
                String nombre = jfc.getSelectedFile().getPath();
                File archivo = new File(nombre);
                FileReader sc = new FileReader(archivo);
                BufferedReader br = new BufferedReader(sc);

                while ((texto2 = br.readLine()) != null) {
                    System.out.println(texto2);
                    pi += texto2 + "\n";
                }

            } catch (IOException e) {

                System.out.println("No se ha encontrado el archivo");
            }

        }
        jTextPane2.setText(pi);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        Analizador ana = new Analizador(nc);
        ana.analizar();
        niveles = ana.getniveles();
        np = niveles.get(con).getmatriz();
        filas = niveles.get(con).getx();
        columnas = niveles.get(con).gety();
        posicion = (columnas / 2) - 1;
        puntosnivel = 100;
        int v = niveles.get(con).getnumero();
        velocidad = v * 600;
        jPanel2.setLayout(new GridLayout(filas, columnas));
        b = new JButton[filas][columnas];
        for (int fila = 0; fila < filas; fila++) {
            for (int columna = 0; columna < columnas; columna++) {
                JButton bo = new JButton();
                bo.setLocation(fila, columna);
                b[fila][columna] = bo;
                jPanel2.add(b[fila][columna]);
            }

        }
        jPanel2.validate();
        jPanel2.repaint();
        buscar();
        nt = ana.gettokens();
        for (int i = 0; i < nt.size(); i++) {
            System.out.println(nt.get(i).gettipo() + "     " + nt.get(i).getlex() + "    " + nt.get(i).getcol() + "     " + nt.get(i).getfil());
        }
        errores = ana.geterrores();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        Analizador a = new Analizador(pi);
        a.analizar2();
        fig = a.getpieza();
        for (int i = 0; i < fig.size(); i++) {
            System.out.println(fig.get(i).getnombre() + fig.get(i).getrotacion());
        }
        nt2 = a.gettokens2();
        errores2 = a.geterrores2();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        System.out.println(errores.size() + "  " + errores2.size());
        if (errores.size() == 0 && errores2.size() == 0) {
            conrotaci√≥n = fig.get(contadorpieza).getrotacion();
            //obtenerfin(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
            fin = 0;
            pintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
            buscar();
            jPanel2.validate();
            jPanel2.repaint();
            desplazar();
            jLabel1.setText(niveles.get(con).getnombre()+"\t"+"Puntos acumulados    =   "+puntos);
            jPanel2.setBounds(10, 10, 500, 500);
            jPanel2.validate();
            jPanel2.repaint();
        } else {
            try {

                String ruta = "../practica1_compi1/reporte_errores.html";
                File archivo = new File(ruta);
                BufferedWriter bw;
                if (archivo.exists()) {
                    bw = new BufferedWriter(new FileWriter(archivo));
                    //bw.write("El fichero de texto ya estaba creado.");
                } else {
                    bw = new BufferedWriter(new FileWriter(archivo));
                    //bw.write("Acabo de crear el fichero de texto.");
                }
                bw.write("<html>\n<head>\n<title>reporte errores</title>\n</head>\n<body>\n<h3>reporte tokens archivo 1</h3>\n\n<table><tr>\n<td><strong>lexema</strong></td><td><strong>fila</strong></td><td><strong>columna</strong></td>\n</tr>");
                for (int i = 0; i < errores.size(); i++) {
                    bw.write("<tr>\n<td>" + errores.get(i).getlex() + "</td><td>" + errores.get(i).getfil() + "</td><td>" + errores.get(i).getcol() + "</td>\n</tr>");
                }
                bw.write("\n</table>\n");
                bw.write("\n<h3>reporte errores archivo 2</h3>\n");
                bw.write("\n<table><tr>\n<td><strong>lexema</strong></td><td><strong>fila</strong></td><td><strong>columna</strong></td>\n</tr>");
                for (int i = 0; i < errores2.size(); i++) {
                    bw.write("<tr>\n<td>" + errores2.get(i).getlex() + "</td><td>" + errores2.get(i).getfil() + "</td><td>" + errores2.get(i).getcol() + "</td>\n</tr>");
                }
                bw.write("\n</table>\n");
                bw.write("</body></html>");
                bw.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed
    @SuppressWarnings("empty-statement")
    public void validarbajada(String letra, int rot, int fin, int col) {
        contadorbajada = 0;
        despintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
        int fi = fin + 1;
        if (fi < 0 || fi > filas - 1) {
            contadorbajada = 10;
        } else if (col < 0 || col > columnas - 1) {
            contadorbajada = 10;
        } else {
            switch (letra) {
                case "T":
                    try {
                        if (rot == 1) {
                            if (np[fi - 1][col - 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col + 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            };
                        } else if (rot == 2) {
                            if (np[fi][col - 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col + 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            };
                        } else if (rot == 3) {
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col + 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            };
                        } else if (rot == 4) {
                            if (np[fi - 2][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col - 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            };
                        }

                    } catch (Exception e) {

                    }

                    break;

                case "L":
                    try {
                        if (rot == 1) {
                            if (np[fi - 2][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col + 1] == 35) {
                                contadorbajada++;
                            };
                        } else if (rot == 2) {
                            if (np[fi - 2][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 2][col + 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col + 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col + 1] == 35) {
                                contadorbajada++;
                            };
                        } else if (rot == 3) {
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col + 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col + 2] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col + 2] == 35) {
                                contadorbajada++;
                            };
                        } else if (rot == 4) {
                            if (np[fi][col - 2] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col - 2] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col - 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            };
                        }
                    } catch (Exception e) {

                    }
                    break;
                case "I":
                    try {
                        if (rot == 1) {
                            if (np[fi - 3][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 2][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            };
                        } else if (rot == 3) {
                            if (np[fi][col - 3] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col - 2] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col - 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            };
                        } else if (rot == 2) {
                            if (np[fi - 3][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 2][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            };
                        } else if (rot == 4) {
                            if (np[fi][col - 3] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col - 2] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col - 1] == 35) {
                                contadorbajada++;
                            };
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            };
                        }
                    } catch (Exception e) {

                    }
                    break;
                case "Z":
                    try {
                        if (rot == 1) {
                            if (np[fi][col + 2] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col + 0] == 35) {
                                contadorbajada++;
                            }
                        } else if (rot == 3) {

                            if (np[fi - 0][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 2][col + 1] == 35) {
                                contadorbajada++;
                            }
                        } else if (rot == 2) {
                            if (np[fi][col + 2] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col + 0] == 35) {
                                contadorbajada++;
                            }
                        } else if (rot == 4) {
                            if (np[fi - 0][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 2][col + 1] == 35) {
                                contadorbajada++;
                            }
                        }
                        System.out.println(contadorbajada);
                    } catch (Exception e) {

                    }
                    break;
                case "O":
                    try {
                        if (np[fi - 1][col] == 35) {
                            contadorbajada++;
                        }
                        if (np[fi - 1][col + 1] == 35) {
                            contadorbajada++;
                        }
                        if (np[fi][col + 1] == 35) {
                            contadorbajada++;
                        }
                        if (np[fi][col] == 35) {
                            contadorbajada++;
                        }
                    } catch (Exception e) {

                    }
                    break;
                case "S":
                    try {
                        if (rot == 1) {
                            if (np[fi + 3][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi + 3][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi + 2][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi + 2][col + 2] == 35) {
                                contadorbajada++;
                            }
                        } else if (rot == 2) {
                            if (np[fi - 2][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 0][col + 1] == 35) {
                                contadorbajada++;
                            }
                        } else if (rot == 3) {
                            if (np[fi + 3][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi + 3][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi + 2][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi + 2][col + 2] == 35) {
                                contadorbajada++;
                            }
                        } else if (rot == 4) {
                            if (np[fi - 2][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 0][col + 1] == 35) {
                                contadorbajada++;
                            }
                        }
                    } catch (Exception e) {

                    }
                    break;
                case "J":
                    try {
                        if (rot == 1) {
                            if (np[fi - 2][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi][col - 1] == 35) {
                                contadorbajada++;
                            }
                        } else if (rot == 2) {
                            if (np[fi][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 2][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 2][col + 1] == 35) {
                                contadorbajada++;
                            }
                        } else if (rot == 3) {
                            if (np[fi - 2][col] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 2][col + 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 2][col + 2] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col + 2] == 35) {
                                contadorbajada++;
                            }
                        } else if (rot == 4) {
                            if (np[fi - 2][col - 2] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col - 2] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col - 1] == 35) {
                                contadorbajada++;
                            }
                            if (np[fi - 1][col - 0] == 35) {
                                contadorbajada++;
                            }
                        }
                    } catch (Exception e) {

                    }
                    break;
            }
        }
    }

    public void desplazar() {
        Timer timer = new Timer(velocidad, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                bajar();
                }catch(Exception o){
                    
                }
            }
        });
        timer.start();
        if (contadorbajada == 4) {
            timer.stop();
        }
    }

    public void bajar() {
        try{

        validarbajada(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
        }catch(Exception e){
            
        }
        if (contadorbajada == 4) {
            despintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
            jPanel2.validate();
            jPanel2.repaint();
            fin++;
            pintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
            buscar();
            jPanel2.validate();
            jPanel2.repaint();
        } else {
            try{
            pintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
            }catch(Exception e){
                
            }
            int cont = 0;
            int mat = 0;
            for (int fila = 0; fila < filas; fila++) {
                cont = 0;
                for (int columna = 0; columna < columnas; columna++) {

                    if (np[fila][columna] == 42) {
                        cont++;
                        if (cont == columnas) {
                            mat++;
                            char[][] matrizaux = np;
                            char aux;
                            for (int j = fila; j >= 0; j--) {
                                for (int i = 0; i < columnas; i++) {
                                    if (j == 0) {
                                        matrizaux[j][i] = 35;
                                    } else {
                                        aux = matrizaux[j][i];
                                        matrizaux[j][i] = matrizaux[j - 1][i];
                                        matrizaux[j - 1][i] = aux;
                                    }
                                }
                            }

                            np = matrizaux;
                        }
                    } else {

                    }
                }

            }
            buscar();
            jPanel2.validate();
            jPanel2.repaint();
            contadorpieza++;
            if (contadorpieza >= fig.size()) {
                contadorpieza = 0;
            }
            fin = 0;
            posicion = (columnas / 2) - 1;
            conrotaci√≥n = fig.get(contadorpieza).getrotacion();
            validarbajada(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
            
            if(np[fin+1][posicion] == 42){
                niveles = new ArrayList<Nivel>();
                fig = new ArrayList<Figura>();
                JOptionPane.showMessageDialog(null, "Juego perdido");
                jPanel2.removeAll();
                jPanel2.repaint();
            }else{
                
            }
            
                pintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
                jLabel1.setText(niveles.get(con).getnombre()+"\t"+"Puntos acumulados    =   "+puntos);
                buscar();
                jPanel2.validate();
                jPanel2.repaint();

                if (mat == 1) {
                    puntos = puntos + 10;
                } else if (mat == 2) {
                    puntos = puntos + 15;
                } else if (mat >= 3) {
                    puntos = puntos + 20;
                }
                jLabel1.setText(niveles.get(con).getnombre()+"\n"+"Puntos acumulados    =   "+puntos);
                if (puntos >= puntosnivel) {

                    if (con >= niveles.size() - 1) {
                        jPanel2.removeAll();
                        JOptionPane.showMessageDialog(null, "Juego terminado \n Has ganado");
                    } else {
                        con++;
                        velocidad = velocidad - 500;
                        puntos = 0;
                        jPanel2.removeAll();
                        puntosnivel = (2 * 100) + 100;
                        JOptionPane.showMessageDialog(null, "Nuevo nivel" + puntosnivel);
                        jLabel1.setText(niveles.get(con).getnombre()+"\n"+"Puntos acumulados    =   "+puntos);
                        np = niveles.get(con).getmatriz();
                        filas = niveles.get(con).getx();
                        columnas = niveles.get(con).gety();
                        posicion = (columnas / 2) - 2;
                        jPanel2.setLayout(new GridLayout(filas, columnas));
                        b = new JButton[filas][columnas];
                        for (int fila = 0; fila < filas; fila++) {
                            for (int columna = 0; columna < columnas; columna++) {
                                JButton bo = new JButton();
                                bo.setLocation(fila, columna);
                                b[fila][columna] = bo;
                                jPanel2.add(b[fila][columna]);
                            }

                        }
                        jPanel2.validate();
                        jPanel2.repaint();
                        buscar();
                    }
                }
            

        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //cambiar figura

        bajar();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //mover hacia atras
        validarbajada(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion - 1);
        if (contadorbajada == 4) {
            despintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
            jPanel2.validate();
            jPanel2.repaint();
            posicion--;
            pintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
            buscar();
            jPanel2.validate();
            jPanel2.repaint();
        } else {
            pintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        validarbajada(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion + 1);
        if (contadorbajada == 4) {
            despintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
            jPanel2.validate();
            jPanel2.repaint();
            posicion++;
            pintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
            buscar();
            jPanel2.validate();
            jPanel2.repaint();
        } else {
            pintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    public void buscar() {
        for (int fila = 0; fila < filas; fila++) {
            for (int columna = 0; columna < columnas; columna++) {
                if (np[fila][columna] == 42) {
                    b[fila][columna].setBackground(Color.yellow);
                } else {
                    b[fila][columna].setBackground(Color.black);
                }
            }

        }
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        despintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
        conrotaci√≥n++;
        if (conrotaci√≥n > 4) {
            conrotaci√≥n = 1;
        }
        pintar(fig.get(contadorpieza).getnombre(), conrotaci√≥n, fin, posicion);
        buscar();
        jPanel2.validate();
        jPanel2.repaint();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        try {

            String ruta = "../practica1_compi1/reporte_token.html";
            File archivo = new File(ruta);
            BufferedWriter bw;
            if (archivo.exists()) {
                bw = new BufferedWriter(new FileWriter(archivo));
                //bw.write("El fichero de texto ya estaba creado.");
            } else {
                bw = new BufferedWriter(new FileWriter(archivo));
                //bw.write("Acabo de crear el fichero de texto.");
            }
            bw.write("<html>\n<head>\n<title>reporte tokens</title>\n</head>\n<body>\n<h3>reporte tokens archivo 1</h3>\n\n<table><tr>\n<td><strong>tipo</strong></td><td><strong>lexema</strong></td><td><strong>fila</strong></td><td><strong>columna</strong></td>\n</tr>");
            for (int i = 0; i < nt.size(); i++) {
                bw.write("<tr>\n<td>" + nt.get(i).gettipo() + "</td><td>" + nt.get(i).getlex() + "</td><td>" + nt.get(i).getfil() + "</td><td>" + nt.get(i).getcol() + "</td>\n</tr>");
            }
            bw.write("\n</table>\n");
            bw.write("\n<h3>reporte tokens archivo 2</h3>\n");
            bw.write("\n<table><tr>\n<td><strong>tipo</strong></td><td><strong>lexema</strong></td><td><strong>fila</strong></td><td><strong>columna</strong></td>\n</tr>");
            for (int i = 0; i < nt2.size(); i++) {
                bw.write("<tr>\n<td>" + nt2.get(i).gettipo() + "</td><td>" + nt2.get(i).getlex() + "</td><td>" + nt2.get(i).getfil() + "</td><td>" + nt2.get(i).getcol() + "</td>\n</tr>");
            }
            bw.write("\n</table>\n");
            bw.write("</body></html>");
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jMenuItem9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }

        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables
}
